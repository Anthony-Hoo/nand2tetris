// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
        // //
        // //  Define the role of flags inputed
        // //
        // DMux16(in=x, sel=zx, a=zx1, b=zx2);
        // DMux16(in=x, sel=nx, a=nx1, b=nx2);
        // DMux16(in=y, sel=zy, a=zy1, b=zy2);
        // DMux16(in=y, sel=ny, a=ny1, b=ny2);
        // Mux16(a=and1, b=or1, sel=f, out=out1);
        // DMux16(in=out1, sel=no, a=pout, b=out2);
        // Not16(in=out2, out=nout);
        // Or16(a=pout, b=nout, out=out);
        // //
        // // make x or y zero when flag zx or zy is 1
        // //
        // Or16(a=zx1, b=0, out=x1);  
        // Or16(a=zy1, b=0, out=y1);
        // //
        // // not x or y  when flag nx or ny is 1
        // //
        // Or16(a=nx1, b=nnx2, out=x1);
        // Not16(in=nx2, out=nnx2);
        //
        // Code above is a *wrong* (or more complex) way, we can use Mux to run it.
        // below is the Mux way:
        //
        Mux16(a=x, b=false, sel=zx, out=x2bInput);                  // flag zx
        Mux16(a=y, b=false, sel=zy, out=y2bInput);                  // flag zy
        Mux16(a=x2bInput, b=notx2bInput, sel=nx, out=x2bCompute);   // flag nx
        Mux16(a=y2bInput, b=noty2bInput, sel=ny, out=y2bCompute);   // flag ny
        Mux16(a=andxy, b=addxy, sel=f, out=o2bOutput);              // flag f
        Mux16(a=o2bOutput, b=noto2bOutput, sel=no, out=out2bd);     // flag no
        
        // Bottom element used above
        Not16(in=x2bInput, out=notx2bInput);
        Not16(in=y2bInput, out=noty2bInput);
        And16(a=x2bCompute, b=y2bCompute, out=andxy);
        Add16(a=x2bCompute, b=y2bCompute, out=addxy);
        Not16(in=o2bOutput, out=noto2bOutput);
        
        // set zr and ng flag 
        Mux(a=true, b=false, sel=outIsZero, out=zr);
        Mux(a=true, b=false, sel=outIsNeg, out=ng);
        //  call self-defined chip
        isZero16(in=out2bd, out=outIsZero);
        isNeg16(in=out2bd, out=outIsNeg);
        // output
        Or16(a=out2bd, b=false, out=out);
}