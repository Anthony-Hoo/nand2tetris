// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
        InstructionDecoder(
            instruction=instruction, 
            iFlag=iFlag, 
            aFlag=aFlag, 
            c1Flag=c1Flag, 
            c2Flag=c2Flag, 
            c3Flag=c3Flag, 
            c4Flag=c4Flag, 
            c5Flag=c5Flag, 
            c6Flag=c6Flag, 
            d1Flag=d1Flag, 
            d2Flag=d2Flag, 
            d3Flag=writeM, 
            j1Flag=j1Flag, 
            j2Flag=j2Flag, 
            j3Flag=j3Flag
        );
        Mux16(
            a=instruction, 
            b=ALUoutput, 
            sel=d1Flag, 
            out=TobInput2A
        );
        Register(
            in=TobInput2A, 
            load=iFlag, 
            out=outA
            );                  // reg A
        Mux16(
            a=outA, 
            b=inM, 
            sel=aFlag, 
            out=AorM2Binput2ALU
        );
        Register(
            in=ALUoutput, 
            load=d2Flag, 
            out=D2Binput2ALU
        );
        ALU(
            x=D2Binput2ALU, 
            y=AorM2Binput2ALU, 
            zx=c1Flag, 
            nx=c2Flag, 
            zy=c3Flag, 
            ny=c4Flag, 
            f=c5Flag, 
            no=c6Flag, 
            out=ALUoutput, 
            zr=ALUoutZ, 
            ng=ALUoutN
        );
        PC(
            in=outA, 
            load=jmpFlag, 
            inc=true, 
            reset=reset, 
            out=outPC
        );
        Or(
            a=jmpFlag1, 
            b=jmpFlag2, 
            out=jmpTMP
        );
        Or(
            a=jmpFlag3, 
            b=jmpTMP, 
            out=jmpFlag
        );
        And(
            a=j1Flag, 
            b=ALUoutN, 
            out=jmpFlag1
        );
        And(
            a=j2Flag, 
            b=ALUoutZ, 
            out=jmpFlag2
        );
        And(
            a=j3Flag, 
            b=ALUoutP, 
            out=jmpFlag3
        );
        Or(
            a=NotALUoutN, 
            b=NotALUoutZ, 
            out=ALUoutP
        );
        Not(
            in=ALUoutN, 
            out=NotALUoutN
        );
        Not(
            in=ALUoutZ, 
            out=NotALUoutZ
        );

        Selector16to15(
            input=outA, 
            output=addressM
        );
        Selector16to15(
            input=outPC, 
            output=pc
        );

}